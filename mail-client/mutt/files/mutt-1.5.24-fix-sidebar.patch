diff --git a/sidebar.c b/sidebar.c
index 7b972ab..d40b21a 100644
--- a/sidebar.c
+++ b/sidebar.c
@@ -1,21 +1,21 @@
 /*
  * Copyright (C) ????-2004 Justin Hibbits <jrh29@po.cwru.edu>
  * Copyright (C) 2004 Thomer M. Gil <mutt@thomer.com>
- * 
+ *
  *     This program is free software; you can redistribute it and/or modify
  *     it under the terms of the GNU General Public License as published by
  *     the Free Software Foundation; either version 2 of the License, or
  *     (at your option) any later version.
- * 
+ *
  *     This program is distributed in the hope that it will be useful,
  *     but WITHOUT ANY WARRANTY; without even the implied warranty of
  *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  *     GNU General Public License for more details.
- * 
+ *
  *     You should have received a copy of the GNU General Public License
  *     along with this program; if not, write to the Free Software
  *     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA.
- */ 
+ */
 
 
 #if HAVE_CONFIG_H
@@ -30,6 +30,7 @@
 #include <libgen.h>
 #include "keymap.h"
 #include <stdbool.h>
+#include <unistd.h>
 
 /*BUFFY *CurBuffy = 0;*/
 static BUFFY *TopBuffy = 0;
@@ -197,7 +198,7 @@ int draw_sidebar(int menu) {
         static short saveSidebarWidth;
         int lines = 0;
         int SidebarHeight;
-        
+
         if(option(OPTSTATUSONTOP) || option(OPTHELP))
                 lines++; /* either one will occupy the first line */
 
@@ -277,7 +278,7 @@ int draw_sidebar(int menu) {
         if(option(OPTSTATUSONTOP) || option(OPTHELP))
                 lines++; /* either one will occupy the first line */
 
-	if ( known_lines != LINES || TopBuffy == 0 || BottomBuffy == 0 ) 
+	if ( known_lines != LINES || TopBuffy == 0 || BottomBuffy == 0 )
 		calc_boundaries(menu);
 	if ( CurBuffy == 0 ) CurBuffy = Incoming;
 
@@ -311,8 +312,9 @@ int draw_sidebar(int menu) {
 		/* check whether Maildir is a prefix of the current folder's path */
 		short maildir_is_prefix = 0;
 		if ( (strlen(tmp->path) > maildirlen) &&
-			(strncmp(Maildir, tmp->path, maildirlen) == 0) )
-        		maildir_is_prefix = 1;
+			(strncmp(Maildir, tmp->path, maildirlen) == 0) ) {
+				maildir_is_prefix = 1;
+		}
 		/* calculate depth of current folder and generate its display name with indented spaces */
 		int sidebar_folder_depth = 0;
 		int i;
@@ -323,7 +325,7 @@ int draw_sidebar(int menu) {
 			sidebar_folder_name = tmp->path;
 			for (i = strlen(sidebar_folder_name) - 2; i >= 0; i--) {
 				if (SidebarDelimChars &&
-						strchr(SidebarDelimChars, sidebar_folder_name[i]))
+						strchr(SidebarDelimChars+1, sidebar_folder_name[i]))
 				{
 					sidebar_folder_name += i + 1;
 					break;
@@ -332,24 +334,24 @@ int draw_sidebar(int menu) {
 		} else {
 			sidebar_folder_name = tmp->path + maildir_is_prefix*(maildirlen + 1);
 		}
-		if ( maildir_is_prefix && option(OPTSIDEBARFOLDERINDENT) ) {
+		if ( option(OPTSIDEBARFOLDERINDENT) ) {
 			char *tmp_folder_name;
 			int lastsep = 0;
-			tmp_folder_name = tmp->path + maildirlen + 1;
+			tmp_folder_name = tmp->path +  1;
 			for (i = 0; i < strlen(tmp_folder_name) - 1; i++) {
 				if (SidebarDelimChars &&
-						strchr(SidebarDelimChars, tmp_folder_name[i]))
+						strchr(SidebarDelimChars+1, tmp_folder_name[i]))
 				{
 					sidebar_folder_depth++;
 					lastsep = i + 1;
 				}
 			}
 			if (sidebar_folder_depth > 0) {
- 				if (option(OPTSIDEBARSHORTPATH))
+				if (option(OPTSIDEBARSHORTPATH))
 					tmp_folder_name += lastsep;  /* basename */
- 				sidebar_folder_name = malloc(strlen(tmp_folder_name) + sidebar_folder_depth*strlen(NONULL(SidebarIndentStr)) + 1);
+				sidebar_folder_name = malloc(strlen(tmp_folder_name) + sidebar_folder_depth*strlen(NONULL(SidebarIndentStr)) + 1);
 				sidebar_folder_name[0]=0;
-				for (i=0; i < sidebar_folder_depth; i++)
+				for (i=0; i < sidebar_folder_depth-3; i++)
 					strncat(sidebar_folder_name, NONULL(SidebarIndentStr), strlen(NONULL(SidebarIndentStr)));
 				strncat(sidebar_folder_name, tmp_folder_name, strlen(tmp_folder_name));
 			}
